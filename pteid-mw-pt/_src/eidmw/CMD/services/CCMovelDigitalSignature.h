// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* CCMovelDigitalSignature.h
   Generated by wsdl2h 2.8.96 from CCMovelDigitalSignature.wsdl and
/home/agrr/Downloads/gsoap_2.8.96/gsoap/wsdl/typemap.dat 2019-12-18 10:50:24 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on CCMovelDigitalSignature.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/

// gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns2 = "http://Ama.Authentication.Service/"
ser = "http://schemas.microsoft.com/2003/10/Serialization/"
ns3 = "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"

*/

#define SOAP_NAMESPACE_OF_ns2 "http://Ama.Authentication.Service/"
// gsoap ns2   schema namespace:	http://Ama.Authentication.Service/
// gsoap ns2   schema elementForm:	qualified
// gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ser "http://schemas.microsoft.com/2003/10/Serialization/"
// gsoap ser   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
// gsoap ser   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns3 "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"
// gsoap ns3   schema namespace:	http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature
// gsoap ns3   schema elementForm:	qualified
// gsoap ns3   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD root type "xs:anyType".
///
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anyType or a
/// derived type.  Use option -P to remove this class.
class xsd__anyType {
public:
	_XML __item;
	struct soap *soap;
};

/// Built-in type "xs:QName".
typedef std::string xsd__QName;

/// Built-in type "xs:base64Binary".
class xsd__base64Binary {
public:
	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIME/MIME/MTOM XOP attachments only
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Primitive built-in type "xs:ID".
typedef std::string xsd__ID;

/// Class wrapper xsd__ID__ for built-in type "xs:ID" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__ID__ or a
/// derived type.  Use option -P to remove this class.
class xsd__ID__ : public xsd__anyType {
public:
	xsd__ID __item;
};

/// Primitive built-in type "xs:IDREF".
typedef std::string xsd__IDREF;

/// Class wrapper xsd__IDREF__ for built-in type "xs:IDREF" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__IDREF__ or a
/// derived type.  Use option -P to remove this class.
class xsd__IDREF__ : public xsd__anyType {
public:
	xsd__IDREF __item;
};

/// Class wrapper xsd__QName__ for built-in type "xs:QName" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__QName__ or a
/// derived type.  Use option -P to remove this class.
class xsd__QName__ : public xsd__anyType {
public:
	xsd__QName __item;
};

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Class wrapper xsd__anyURI__ for built-in type "xs:anyURI" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__anyURI__ or a
/// derived type.  Use option -P to remove this class.
class xsd__anyURI__ : public xsd__anyType {
public:
	xsd__anyURI __item;
};

/// Class wrapper xsd__base64Binary__ for built-in type "xs:base64Binary" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__base64Binary__
/// or a derived type.  Use option -P to remove this class.
class xsd__base64Binary__ : public xsd__anyType {
public:
	xsd__base64Binary __item;
};

/// Class wrapper xsd__boolean_ for built-in type "xs:boolean" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__boolean_ or a
/// derived type.  Use option -P to remove this class.
class xsd__boolean_ : public xsd__anyType {
public:
	bool __item;
};

/// Class wrapper xsd__byte__ for built-in type "xs:byte" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__byte__ or a
/// derived type.  Use option -P to remove this class.
class xsd__byte__ : public xsd__anyType {
public:
	xsd__byte __item;
};

/// Class wrapper xsd__dateTime_ for built-in type "xs:dateTime" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__dateTime_ or a
/// derived type.  Use option -P to remove this class.
class xsd__dateTime_ : public xsd__anyType {
public:
	time_t __item;
};

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Class wrapper xsd__decimal__ for built-in type "xs:decimal" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__decimal__ or a
/// derived type.  Use option -P to remove this class.
class xsd__decimal__ : public xsd__anyType {
public:
	xsd__decimal __item;
};

/// Class wrapper xsd__double_ for built-in type "xs:double" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__double_ or a
/// derived type.  Use option -P to remove this class.
class xsd__double_ : public xsd__anyType {
public:
	double __item;
};

/// Primitive built-in type "xs:duration".
typedef std::string xsd__duration;

/// Class wrapper xsd__duration__ for built-in type "xs:duration" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__duration__ or a
/// derived type.  Use option -P to remove this class.
class xsd__duration__ : public xsd__anyType {
public:
	xsd__duration __item;
};

/// Class wrapper xsd__float_ for built-in type "xs:float" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__float_ or a
/// derived type.  Use option -P to remove this class.
class xsd__float_ : public xsd__anyType {
public:
	float __item;
};

/// Class wrapper xsd__int_ for built-in type "xs:int" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__int_ or a
/// derived type.  Use option -P to remove this class.
class xsd__int_ : public xsd__anyType {
public:
	int __item;
};

/// Class wrapper xsd__long_ for built-in type "xs:long" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__long_ or a
/// derived type.  Use option -P to remove this class.
class xsd__long_ : public xsd__anyType {
public:
	LONG64 __item;
};

/// Class wrapper xsd__short_ for built-in type "xs:short" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__short_ or a
/// derived type.  Use option -P to remove this class.
class xsd__short_ : public xsd__anyType {
public:
	short __item;
};

/// Class wrapper xsd__string_ for built-in type "xs:string" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__string_ or a
/// derived type.  Use option -P to remove this class.
class xsd__string_ : public xsd__anyType {
public:
	std::string __item;
};

/// Class wrapper xsd__unsignedByte__ for built-in type "xs:unsignedByte" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedByte__
/// or a derived type.  Use option -P to remove this class.
class xsd__unsignedByte__ : public xsd__anyType {
public:
	xsd__unsignedByte __item;
};

/// Class wrapper xsd__unsignedInt_ for built-in type "xs:unsignedInt" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedInt_ or
/// a derived type.  Use option -P to remove this class.
class xsd__unsignedInt_ : public xsd__anyType {
public:
	unsigned int __item;
};

/// Class wrapper xsd__unsignedLong_ for built-in type "xs:unsignedLong" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedLong_ or
/// a derived type.  Use option -P to remove this class.
class xsd__unsignedLong_ : public xsd__anyType {
public:
	ULONG64 __item;
};

/// Class wrapper xsd__unsignedShort_ for built-in type "xs:unsignedShort" extends xsd__anyType.
/// @note Call virtual method soap_type() generated by soapcpp2 to check runtime type is SOAP_TYPE_xsd__unsignedShort_
/// or a derived type.  Use option -P to remove this class.
class xsd__unsignedShort_ : public xsd__anyType {
public:
	unsigned short __item;
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/

class _ns2__CCMovelSign;

class _ns2__CCMovelSignResponse;

class _ns2__GetCertificate;

class _ns2__GetCertificateResponse;

class _ns2__ValidateOtp;

class _ns2__ValidateOtpResponse;

class _ns2__CCMovelMultipleSign;

class _ns2__CCMovelMultipleSignResponse;

class _ns2__ForceSMS;

class _ns2__ForceSMSResponse;

class _ns2__GetCertificateWithPin;

class _ns2__GetCertificateWithPinResponse;

class ns3__SignRequest;

class ns3__SignStatus;

class ns3__SignResponse;

class ns3__ArrayOfHashStructure;

class ns3__HashStructure;

class ns3__MultipleSignRequest;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":char from typemap
/// "/home/agrr/Downloads/gsoap_2.8.96/gsoap/wsdl/typemap.dat".
// simpleType definition intentionally left blank.
/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":duration from typemap
/// "/home/agrr/Downloads/gsoap_2.8.96/gsoap/wsdl/typemap.dat".
// simpleType definition intentionally left blank.
/// Imported simpleType "http://schemas.microsoft.com/2003/10/Serialization/":guid from typemap
/// "/home/agrr/Downloads/gsoap_2.8.96/gsoap/wsdl/typemap.dat".
// simpleType definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelSign
/// @brief "http://Ama.Authentication.Service/":CCMovelSign is a complexType.
///
/// @note class _ns2__CCMovelSign operations:
/// - _ns2__CCMovelSign* soap_new__ns2__CCMovelSign(soap*) allocate and default initialize
/// - _ns2__CCMovelSign* soap_new__ns2__CCMovelSign(soap*, int num) allocate and default initialize an array
/// - _ns2__CCMovelSign* soap_new_req__ns2__CCMovelSign(soap*, ...) allocate, set required members
/// - _ns2__CCMovelSign* soap_new_set__ns2__CCMovelSign(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelSign::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelSign(soap*, _ns2__CCMovelSign*) deserialize from a stream
/// - int soap_write__ns2__CCMovelSign(soap*, _ns2__CCMovelSign*) serialize to a stream
/// - _ns2__CCMovelSign* _ns2__CCMovelSign::soap_dup(soap*) returns deep copy of _ns2__CCMovelSign, copies the (cyclic)
/// graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE)
/// (use soapcpp2 -Ec)
/// - _ns2__CCMovelSign::soap_del() deep deletes _ns2__CCMovelSign data members, use only after
/// _ns2__CCMovelSign::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__CCMovelSign::soap_type() returns SOAP_TYPE__ns2__CCMovelSign or derived type identifier
class _ns2__CCMovelSign {
public:
	/// Element "request" of type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest.
	ns3__SignRequest *request 0; ///< Optional element.
								 /// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelSignResponse
/// @brief "http://Ama.Authentication.Service/":CCMovelSignResponse is a complexType.
///
/// @note class _ns2__CCMovelSignResponse operations:
/// - _ns2__CCMovelSignResponse* soap_new__ns2__CCMovelSignResponse(soap*) allocate and default initialize
/// - _ns2__CCMovelSignResponse* soap_new__ns2__CCMovelSignResponse(soap*, int num) allocate and default initialize an
/// array
/// - _ns2__CCMovelSignResponse* soap_new_req__ns2__CCMovelSignResponse(soap*, ...) allocate, set required members
/// - _ns2__CCMovelSignResponse* soap_new_set__ns2__CCMovelSignResponse(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelSignResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelSignResponse(soap*, _ns2__CCMovelSignResponse*) deserialize from a stream
/// - int soap_write__ns2__CCMovelSignResponse(soap*, _ns2__CCMovelSignResponse*) serialize to a stream
/// - _ns2__CCMovelSignResponse* _ns2__CCMovelSignResponse::soap_dup(soap*) returns deep copy of
/// _ns2__CCMovelSignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelSignResponse::soap_del() deep deletes _ns2__CCMovelSignResponse data members, use only after
/// _ns2__CCMovelSignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__CCMovelSignResponse::soap_type() returns SOAP_TYPE__ns2__CCMovelSignResponse or derived type identifier
class _ns2__CCMovelSignResponse {
public:
	/// Element "CCMovelSignResult" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
	ns3__SignStatus *CCMovelSignResult 0; ///< Optional element.
										  /// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificate
/// @brief "http://Ama.Authentication.Service/":GetCertificate is a complexType.
///
/// @note class _ns2__GetCertificate operations:
/// - _ns2__GetCertificate* soap_new__ns2__GetCertificate(soap*) allocate and default initialize
/// - _ns2__GetCertificate* soap_new__ns2__GetCertificate(soap*, int num) allocate and default initialize an array
/// - _ns2__GetCertificate* soap_new_req__ns2__GetCertificate(soap*, ...) allocate, set required members
/// - _ns2__GetCertificate* soap_new_set__ns2__GetCertificate(soap*, ...) allocate, set all public members
/// - _ns2__GetCertificate::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificate(soap*, _ns2__GetCertificate*) deserialize from a stream
/// - int soap_write__ns2__GetCertificate(soap*, _ns2__GetCertificate*) serialize to a stream
/// - _ns2__GetCertificate* _ns2__GetCertificate::soap_dup(soap*) returns deep copy of _ns2__GetCertificate, copies the
/// (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap,
/// SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificate::soap_del() deep deletes _ns2__GetCertificate data members, use only after
/// _ns2__GetCertificate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__GetCertificate::soap_type() returns SOAP_TYPE__ns2__GetCertificate or derived type identifier
class _ns2__GetCertificate {
public:
	/// Element "applicationId" of type xs:base64Binary.
	xsd__base64Binary *applicationId 0; ///< Optional element.
										/// Element "userId" of type xs:string.
	std::string *userId 0;				///< Optional element.
										/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificateResponse
/// @brief "http://Ama.Authentication.Service/":GetCertificateResponse is a complexType.
///
/// @note class _ns2__GetCertificateResponse operations:
/// - _ns2__GetCertificateResponse* soap_new__ns2__GetCertificateResponse(soap*) allocate and default initialize
/// - _ns2__GetCertificateResponse* soap_new__ns2__GetCertificateResponse(soap*, int num) allocate and default
/// initialize an array
/// - _ns2__GetCertificateResponse* soap_new_req__ns2__GetCertificateResponse(soap*, ...) allocate, set required members
/// - _ns2__GetCertificateResponse* soap_new_set__ns2__GetCertificateResponse(soap*, ...) allocate, set all public
/// members
/// - _ns2__GetCertificateResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificateResponse(soap*, _ns2__GetCertificateResponse*) deserialize from a stream
/// - int soap_write__ns2__GetCertificateResponse(soap*, _ns2__GetCertificateResponse*) serialize to a stream
/// - _ns2__GetCertificateResponse* _ns2__GetCertificateResponse::soap_dup(soap*) returns deep copy of
/// _ns2__GetCertificateResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificateResponse::soap_del() deep deletes _ns2__GetCertificateResponse data members, use only after
/// _ns2__GetCertificateResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__GetCertificateResponse::soap_type() returns SOAP_TYPE__ns2__GetCertificateResponse or derived type
/// identifier
class _ns2__GetCertificateResponse {
public:
	/// Element "GetCertificateResult" of type xs:string.
	std::string *GetCertificateResult 0; ///< Optional element.
										 /// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ValidateOtp
/// @brief "http://Ama.Authentication.Service/":ValidateOtp is a complexType.
///
/// @note class _ns2__ValidateOtp operations:
/// - _ns2__ValidateOtp* soap_new__ns2__ValidateOtp(soap*) allocate and default initialize
/// - _ns2__ValidateOtp* soap_new__ns2__ValidateOtp(soap*, int num) allocate and default initialize an array
/// - _ns2__ValidateOtp* soap_new_req__ns2__ValidateOtp(soap*, ...) allocate, set required members
/// - _ns2__ValidateOtp* soap_new_set__ns2__ValidateOtp(soap*, ...) allocate, set all public members
/// - _ns2__ValidateOtp::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ValidateOtp(soap*, _ns2__ValidateOtp*) deserialize from a stream
/// - int soap_write__ns2__ValidateOtp(soap*, _ns2__ValidateOtp*) serialize to a stream
/// - _ns2__ValidateOtp* _ns2__ValidateOtp::soap_dup(soap*) returns deep copy of _ns2__ValidateOtp, copies the (cyclic)
/// graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE)
/// (use soapcpp2 -Ec)
/// - _ns2__ValidateOtp::soap_del() deep deletes _ns2__ValidateOtp data members, use only after
/// _ns2__ValidateOtp::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__ValidateOtp::soap_type() returns SOAP_TYPE__ns2__ValidateOtp or derived type identifier
class _ns2__ValidateOtp {
public:
	/// Element "code" of type xs:string.
	std::string *code 0;				///< Optional element.
										/// Element "processId" of type xs:string.
	std::string *processId 0;			///< Optional element.
										/// Element "applicationId" of type xs:base64Binary.
	xsd__base64Binary *applicationId 0; ///< Optional element.
										/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ValidateOtpResponse
/// @brief "http://Ama.Authentication.Service/":ValidateOtpResponse is a complexType.
///
/// @note class _ns2__ValidateOtpResponse operations:
/// - _ns2__ValidateOtpResponse* soap_new__ns2__ValidateOtpResponse(soap*) allocate and default initialize
/// - _ns2__ValidateOtpResponse* soap_new__ns2__ValidateOtpResponse(soap*, int num) allocate and default initialize an
/// array
/// - _ns2__ValidateOtpResponse* soap_new_req__ns2__ValidateOtpResponse(soap*, ...) allocate, set required members
/// - _ns2__ValidateOtpResponse* soap_new_set__ns2__ValidateOtpResponse(soap*, ...) allocate, set all public members
/// - _ns2__ValidateOtpResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ValidateOtpResponse(soap*, _ns2__ValidateOtpResponse*) deserialize from a stream
/// - int soap_write__ns2__ValidateOtpResponse(soap*, _ns2__ValidateOtpResponse*) serialize to a stream
/// - _ns2__ValidateOtpResponse* _ns2__ValidateOtpResponse::soap_dup(soap*) returns deep copy of
/// _ns2__ValidateOtpResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ValidateOtpResponse::soap_del() deep deletes _ns2__ValidateOtpResponse data members, use only after
/// _ns2__ValidateOtpResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__ValidateOtpResponse::soap_type() returns SOAP_TYPE__ns2__ValidateOtpResponse or derived type identifier
class _ns2__ValidateOtpResponse {
public:
	/// Element "ValidateOtpResult" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse.
	ns3__SignResponse *ValidateOtpResult 0; ///< Optional element.
											/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelMultipleSign
/// @brief "http://Ama.Authentication.Service/":CCMovelMultipleSign is a complexType.
///
/// @note class _ns2__CCMovelMultipleSign operations:
/// - _ns2__CCMovelMultipleSign* soap_new__ns2__CCMovelMultipleSign(soap*) allocate and default initialize
/// - _ns2__CCMovelMultipleSign* soap_new__ns2__CCMovelMultipleSign(soap*, int num) allocate and default initialize an
/// array
/// - _ns2__CCMovelMultipleSign* soap_new_req__ns2__CCMovelMultipleSign(soap*, ...) allocate, set required members
/// - _ns2__CCMovelMultipleSign* soap_new_set__ns2__CCMovelMultipleSign(soap*, ...) allocate, set all public members
/// - _ns2__CCMovelMultipleSign::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelMultipleSign(soap*, _ns2__CCMovelMultipleSign*) deserialize from a stream
/// - int soap_write__ns2__CCMovelMultipleSign(soap*, _ns2__CCMovelMultipleSign*) serialize to a stream
/// - _ns2__CCMovelMultipleSign* _ns2__CCMovelMultipleSign::soap_dup(soap*) returns deep copy of
/// _ns2__CCMovelMultipleSign, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelMultipleSign::soap_del() deep deletes _ns2__CCMovelMultipleSign data members, use only after
/// _ns2__CCMovelMultipleSign::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__CCMovelMultipleSign::soap_type() returns SOAP_TYPE__ns2__CCMovelMultipleSign or derived type identifier
class _ns2__CCMovelMultipleSign {
public:
	/// Element "request" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest.
	ns3__MultipleSignRequest *request 0; ///< Optional element.
										 /// Element "documents" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure.
	ns3__ArrayOfHashStructure *documents 0; ///< Optional element.
											/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":CCMovelMultipleSignResponse
/// @brief "http://Ama.Authentication.Service/":CCMovelMultipleSignResponse is a complexType.
///
/// @note class _ns2__CCMovelMultipleSignResponse operations:
/// - _ns2__CCMovelMultipleSignResponse* soap_new__ns2__CCMovelMultipleSignResponse(soap*) allocate and default
/// initialize
/// - _ns2__CCMovelMultipleSignResponse* soap_new__ns2__CCMovelMultipleSignResponse(soap*, int num) allocate and default
/// initialize an array
/// - _ns2__CCMovelMultipleSignResponse* soap_new_req__ns2__CCMovelMultipleSignResponse(soap*, ...) allocate, set
/// required members
/// - _ns2__CCMovelMultipleSignResponse* soap_new_set__ns2__CCMovelMultipleSignResponse(soap*, ...) allocate, set all
/// public members
/// - _ns2__CCMovelMultipleSignResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__CCMovelMultipleSignResponse(soap*, _ns2__CCMovelMultipleSignResponse*) deserialize from a
/// stream
/// - int soap_write__ns2__CCMovelMultipleSignResponse(soap*, _ns2__CCMovelMultipleSignResponse*) serialize to a stream
/// - _ns2__CCMovelMultipleSignResponse* _ns2__CCMovelMultipleSignResponse::soap_dup(soap*) returns deep copy of
/// _ns2__CCMovelMultipleSignResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned)
/// tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__CCMovelMultipleSignResponse::soap_del() deep deletes _ns2__CCMovelMultipleSignResponse data members, use
/// only after _ns2__CCMovelMultipleSignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__CCMovelMultipleSignResponse::soap_type() returns SOAP_TYPE__ns2__CCMovelMultipleSignResponse or derived
/// type identifier
class _ns2__CCMovelMultipleSignResponse {
public:
	/// Element "CCMovelMultipleSignResult" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
	ns3__SignStatus *CCMovelMultipleSignResult 0; ///< Optional element.
												  /// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ForceSMS
/// @brief "http://Ama.Authentication.Service/":ForceSMS is a complexType.
///
/// @note class _ns2__ForceSMS operations:
/// - _ns2__ForceSMS* soap_new__ns2__ForceSMS(soap*) allocate and default initialize
/// - _ns2__ForceSMS* soap_new__ns2__ForceSMS(soap*, int num) allocate and default initialize an array
/// - _ns2__ForceSMS* soap_new_req__ns2__ForceSMS(soap*, ...) allocate, set required members
/// - _ns2__ForceSMS* soap_new_set__ns2__ForceSMS(soap*, ...) allocate, set all public members
/// - _ns2__ForceSMS::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ForceSMS(soap*, _ns2__ForceSMS*) deserialize from a stream
/// - int soap_write__ns2__ForceSMS(soap*, _ns2__ForceSMS*) serialize to a stream
/// - _ns2__ForceSMS* _ns2__ForceSMS::soap_dup(soap*) returns deep copy of _ns2__ForceSMS, copies the (cyclic) graph
/// structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use
/// soapcpp2 -Ec)
/// - _ns2__ForceSMS::soap_del() deep deletes _ns2__ForceSMS data members, use only after _ns2__ForceSMS::soap_dup(NULL)
/// (use soapcpp2 -Ed)
/// - int _ns2__ForceSMS::soap_type() returns SOAP_TYPE__ns2__ForceSMS or derived type identifier
class _ns2__ForceSMS {
public:
	/// Element "processId" of type xs:string.
	std::string *processId 0;			///< Optional element.
										/// Element "citizenId" of type xs:string.
	std::string *citizenId 0;			///< Optional element.
										/// Element "applicationId" of type xs:base64Binary.
	xsd__base64Binary *applicationId 0; ///< Optional element.
										/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":ForceSMSResponse
/// @brief "http://Ama.Authentication.Service/":ForceSMSResponse is a complexType.
///
/// @note class _ns2__ForceSMSResponse operations:
/// - _ns2__ForceSMSResponse* soap_new__ns2__ForceSMSResponse(soap*) allocate and default initialize
/// - _ns2__ForceSMSResponse* soap_new__ns2__ForceSMSResponse(soap*, int num) allocate and default initialize an array
/// - _ns2__ForceSMSResponse* soap_new_req__ns2__ForceSMSResponse(soap*, ...) allocate, set required members
/// - _ns2__ForceSMSResponse* soap_new_set__ns2__ForceSMSResponse(soap*, ...) allocate, set all public members
/// - _ns2__ForceSMSResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__ForceSMSResponse(soap*, _ns2__ForceSMSResponse*) deserialize from a stream
/// - int soap_write__ns2__ForceSMSResponse(soap*, _ns2__ForceSMSResponse*) serialize to a stream
/// - _ns2__ForceSMSResponse* _ns2__ForceSMSResponse::soap_dup(soap*) returns deep copy of _ns2__ForceSMSResponse,
/// copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with
/// soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__ForceSMSResponse::soap_del() deep deletes _ns2__ForceSMSResponse data members, use only after
/// _ns2__ForceSMSResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__ForceSMSResponse::soap_type() returns SOAP_TYPE__ns2__ForceSMSResponse or derived type identifier
class _ns2__ForceSMSResponse {
public:
	/// Element "ForceSMSResult" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
	ns3__SignStatus *ForceSMSResult 0; ///< Optional element.
									   /// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificateWithPin
/// @brief "http://Ama.Authentication.Service/":GetCertificateWithPin is a complexType.
///
/// @note class _ns2__GetCertificateWithPin operations:
/// - _ns2__GetCertificateWithPin* soap_new__ns2__GetCertificateWithPin(soap*) allocate and default initialize
/// - _ns2__GetCertificateWithPin* soap_new__ns2__GetCertificateWithPin(soap*, int num) allocate and default initialize
/// an array
/// - _ns2__GetCertificateWithPin* soap_new_req__ns2__GetCertificateWithPin(soap*, ...) allocate, set required members
/// - _ns2__GetCertificateWithPin* soap_new_set__ns2__GetCertificateWithPin(soap*, ...) allocate, set all public members
/// - _ns2__GetCertificateWithPin::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificateWithPin(soap*, _ns2__GetCertificateWithPin*) deserialize from a stream
/// - int soap_write__ns2__GetCertificateWithPin(soap*, _ns2__GetCertificateWithPin*) serialize to a stream
/// - _ns2__GetCertificateWithPin* _ns2__GetCertificateWithPin::soap_dup(soap*) returns deep copy of
/// _ns2__GetCertificateWithPin, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificateWithPin::soap_del() deep deletes _ns2__GetCertificateWithPin data members, use only after
/// _ns2__GetCertificateWithPin::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__GetCertificateWithPin::soap_type() returns SOAP_TYPE__ns2__GetCertificateWithPin or derived type
/// identifier
class _ns2__GetCertificateWithPin {
public:
	/// Element "applicationId" of type xs:base64Binary.
	xsd__base64Binary *applicationId 0; ///< Optional element.
										/// Element "userId" of type xs:string.
	std::string *userId 0;				///< Optional element.
										/// Element "signaturePin" of type xs:string.
	std::string *signaturePin 0;		///< Optional element.
										/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/// @brief Top-level root element "http://Ama.Authentication.Service/":GetCertificateWithPinResponse
/// @brief "http://Ama.Authentication.Service/":GetCertificateWithPinResponse is a complexType.
///
/// @note class _ns2__GetCertificateWithPinResponse operations:
/// - _ns2__GetCertificateWithPinResponse* soap_new__ns2__GetCertificateWithPinResponse(soap*) allocate and default
/// initialize
/// - _ns2__GetCertificateWithPinResponse* soap_new__ns2__GetCertificateWithPinResponse(soap*, int num) allocate and
/// default initialize an array
/// - _ns2__GetCertificateWithPinResponse* soap_new_req__ns2__GetCertificateWithPinResponse(soap*, ...) allocate, set
/// required members
/// - _ns2__GetCertificateWithPinResponse* soap_new_set__ns2__GetCertificateWithPinResponse(soap*, ...) allocate, set
/// all public members
/// - _ns2__GetCertificateWithPinResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns2__GetCertificateWithPinResponse(soap*, _ns2__GetCertificateWithPinResponse*) deserialize from a
/// stream
/// - int soap_write__ns2__GetCertificateWithPinResponse(soap*, _ns2__GetCertificateWithPinResponse*) serialize to a
/// stream
/// - _ns2__GetCertificateWithPinResponse* _ns2__GetCertificateWithPinResponse::soap_dup(soap*) returns deep copy of
/// _ns2__GetCertificateWithPinResponse, copies the (cyclic) graph structure when a context is provided, or
/// (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns2__GetCertificateWithPinResponse::soap_del() deep deletes _ns2__GetCertificateWithPinResponse data members, use
/// only after _ns2__GetCertificateWithPinResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns2__GetCertificateWithPinResponse::soap_type() returns SOAP_TYPE__ns2__GetCertificateWithPinResponse or
/// derived type identifier
class _ns2__GetCertificateWithPinResponse {
public:
	/// Element "GetCertificateWithPinResult" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
	ns3__SignStatus *GetCertificateWithPinResult 0; ///< Optional element.
													/// Pointer to soap context that manages this instance.
	struct soap *soap;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest is a complexType.
///
/// @note class ns3__SignRequest operations:
/// - ns3__SignRequest* soap_new_ns3__SignRequest(soap*) allocate and default initialize
/// - ns3__SignRequest* soap_new_ns3__SignRequest(soap*, int num) allocate and default initialize an array
/// - ns3__SignRequest* soap_new_req_ns3__SignRequest(soap*, ...) allocate, set required members
/// - ns3__SignRequest* soap_new_set_ns3__SignRequest(soap*, ...) allocate, set all public members
/// - ns3__SignRequest::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignRequest(soap*, ns3__SignRequest*) deserialize from a stream
/// - int soap_write_ns3__SignRequest(soap*, ns3__SignRequest*) serialize to a stream
/// - ns3__SignRequest* ns3__SignRequest::soap_dup(soap*) returns deep copy of ns3__SignRequest, copies the (cyclic)
/// graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE)
/// (use soapcpp2 -Ec)
/// - ns3__SignRequest::soap_del() deep deletes ns3__SignRequest data members, use only after
/// ns3__SignRequest::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__SignRequest::soap_type() returns SOAP_TYPE_ns3__SignRequest or derived type identifier
class ns3__SignRequest : public xsd__anyType {
public:
	/// Element "ApplicationId" of type xs:base64Binary.
	xsd__base64Binary *ApplicationId nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
												/// Element "DocName" of type xs:string.
	std::string *DocName 0;						///< Optional element.
												/// Element "Hash" of type xs:base64Binary.
	xsd__base64Binary *Hash nullptr 1;			///< Required nillable (xsi:nil when NULL) element.
												/// Element "Pin" of type xs:string.
	std::string *Pin nullptr 1;					///< Required nillable (xsi:nil when NULL) element.
												/// Element "UserId" of type xs:string.
	std::string *UserId nullptr 1;				///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus is a complexType.
///
/// @note class ns3__SignStatus operations:
/// - ns3__SignStatus* soap_new_ns3__SignStatus(soap*) allocate and default initialize
/// - ns3__SignStatus* soap_new_ns3__SignStatus(soap*, int num) allocate and default initialize an array
/// - ns3__SignStatus* soap_new_req_ns3__SignStatus(soap*, ...) allocate, set required members
/// - ns3__SignStatus* soap_new_set_ns3__SignStatus(soap*, ...) allocate, set all public members
/// - ns3__SignStatus::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignStatus(soap*, ns3__SignStatus*) deserialize from a stream
/// - int soap_write_ns3__SignStatus(soap*, ns3__SignStatus*) serialize to a stream
/// - ns3__SignStatus* ns3__SignStatus::soap_dup(soap*) returns deep copy of ns3__SignStatus, copies the (cyclic) graph
/// structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use
/// soapcpp2 -Ec)
/// - ns3__SignStatus::soap_del() deep deletes ns3__SignStatus data members, use only after
/// ns3__SignStatus::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__SignStatus::soap_type() returns SOAP_TYPE_ns3__SignStatus or derived type identifier
class ns3__SignStatus : public xsd__anyType {
public:
	/// Element "Code" of type xs:string.
	std::string *Code nullptr 1;	   ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "Field" of type xs:string.
	std::string *Field nullptr 1;	   ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "FieldValue" of type xs:string.
	std::string *FieldValue nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "Message" of type xs:string.
	std::string *Message nullptr 1;	   ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "ProcessId" of type xs:string.
	std::string *ProcessId nullptr 1;  ///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse is a complexType.
///
/// @note class ns3__SignResponse operations:
/// - ns3__SignResponse* soap_new_ns3__SignResponse(soap*) allocate and default initialize
/// - ns3__SignResponse* soap_new_ns3__SignResponse(soap*, int num) allocate and default initialize an array
/// - ns3__SignResponse* soap_new_req_ns3__SignResponse(soap*, ...) allocate, set required members
/// - ns3__SignResponse* soap_new_set_ns3__SignResponse(soap*, ...) allocate, set all public members
/// - ns3__SignResponse::soap_default(soap*) default initialize members
/// - int soap_read_ns3__SignResponse(soap*, ns3__SignResponse*) deserialize from a stream
/// - int soap_write_ns3__SignResponse(soap*, ns3__SignResponse*) serialize to a stream
/// - ns3__SignResponse* ns3__SignResponse::soap_dup(soap*) returns deep copy of ns3__SignResponse, copies the (cyclic)
/// graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE)
/// (use soapcpp2 -Ec)
/// - ns3__SignResponse::soap_del() deep deletes ns3__SignResponse data members, use only after
/// ns3__SignResponse::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__SignResponse::soap_type() returns SOAP_TYPE_ns3__SignResponse or derived type identifier
class ns3__SignResponse : public xsd__anyType {
public:
	/// Element "ArrayOfHashStructure" of type
	/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure.
	ns3__ArrayOfHashStructure *ArrayOfHashStructure nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
															   /// Element "Signature" of type xs:base64Binary.
	xsd__base64Binary *Signature nullptr 1;					   ///< Required nillable (xsi:nil when NULL) element.
	/// Element "Status" of type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
	ns3__SignStatus *Status nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
										/// Element "certificate" of type xs:string.
	std::string *certificate nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure is a
/// complexType.
///
/// @note class ns3__ArrayOfHashStructure operations:
/// - ns3__ArrayOfHashStructure* soap_new_ns3__ArrayOfHashStructure(soap*) allocate and default initialize
/// - ns3__ArrayOfHashStructure* soap_new_ns3__ArrayOfHashStructure(soap*, int num) allocate and default initialize an
/// array
/// - ns3__ArrayOfHashStructure* soap_new_req_ns3__ArrayOfHashStructure(soap*, ...) allocate, set required members
/// - ns3__ArrayOfHashStructure* soap_new_set_ns3__ArrayOfHashStructure(soap*, ...) allocate, set all public members
/// - ns3__ArrayOfHashStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__ArrayOfHashStructure(soap*, ns3__ArrayOfHashStructure*) deserialize from a stream
/// - int soap_write_ns3__ArrayOfHashStructure(soap*, ns3__ArrayOfHashStructure*) serialize to a stream
/// - ns3__ArrayOfHashStructure* ns3__ArrayOfHashStructure::soap_dup(soap*) returns deep copy of
/// ns3__ArrayOfHashStructure, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree
/// structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__ArrayOfHashStructure::soap_del() deep deletes ns3__ArrayOfHashStructure data members, use only after
/// ns3__ArrayOfHashStructure::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__ArrayOfHashStructure::soap_type() returns SOAP_TYPE_ns3__ArrayOfHashStructure or derived type identifier
class ns3__ArrayOfHashStructure : public xsd__anyType {
public:
	/// Vector of ns3__HashStructure* of length 0..unbounded.
	std::vector<ns3__HashStructure *> HashStructure 0; ///< Multiple elements.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure is a complexType.
///
/// @note class ns3__HashStructure operations:
/// - ns3__HashStructure* soap_new_ns3__HashStructure(soap*) allocate and default initialize
/// - ns3__HashStructure* soap_new_ns3__HashStructure(soap*, int num) allocate and default initialize an array
/// - ns3__HashStructure* soap_new_req_ns3__HashStructure(soap*, ...) allocate, set required members
/// - ns3__HashStructure* soap_new_set_ns3__HashStructure(soap*, ...) allocate, set all public members
/// - ns3__HashStructure::soap_default(soap*) default initialize members
/// - int soap_read_ns3__HashStructure(soap*, ns3__HashStructure*) deserialize from a stream
/// - int soap_write_ns3__HashStructure(soap*, ns3__HashStructure*) serialize to a stream
/// - ns3__HashStructure* ns3__HashStructure::soap_dup(soap*) returns deep copy of ns3__HashStructure, copies the
/// (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap,
/// SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__HashStructure::soap_del() deep deletes ns3__HashStructure data members, use only after
/// ns3__HashStructure::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__HashStructure::soap_type() returns SOAP_TYPE_ns3__HashStructure or derived type identifier
class ns3__HashStructure : public xsd__anyType {
public:
	/// Element "Hash" of type xs:base64Binary.
	xsd__base64Binary *Hash nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "Name" of type xs:string.
	std::string *Name nullptr 1;	   ///< Required nillable (xsi:nil when NULL) element.
									   /// Element "id" of type xs:string.
	std::string *id nullptr 1;		   ///< Required nillable (xsi:nil when NULL) element.
};

/// @brief "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest is a
/// complexType.
///
/// @note class ns3__MultipleSignRequest operations:
/// - ns3__MultipleSignRequest* soap_new_ns3__MultipleSignRequest(soap*) allocate and default initialize
/// - ns3__MultipleSignRequest* soap_new_ns3__MultipleSignRequest(soap*, int num) allocate and default initialize an
/// array
/// - ns3__MultipleSignRequest* soap_new_req_ns3__MultipleSignRequest(soap*, ...) allocate, set required members
/// - ns3__MultipleSignRequest* soap_new_set_ns3__MultipleSignRequest(soap*, ...) allocate, set all public members
/// - ns3__MultipleSignRequest::soap_default(soap*) default initialize members
/// - int soap_read_ns3__MultipleSignRequest(soap*, ns3__MultipleSignRequest*) deserialize from a stream
/// - int soap_write_ns3__MultipleSignRequest(soap*, ns3__MultipleSignRequest*) serialize to a stream
/// - ns3__MultipleSignRequest* ns3__MultipleSignRequest::soap_dup(soap*) returns deep copy of ns3__MultipleSignRequest,
/// copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with
/// soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__MultipleSignRequest::soap_del() deep deletes ns3__MultipleSignRequest data members, use only after
/// ns3__MultipleSignRequest::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__MultipleSignRequest::soap_type() returns SOAP_TYPE_ns3__MultipleSignRequest or derived type identifier
class ns3__MultipleSignRequest : public xsd__anyType {
public:
	/// Element "ApplicationId" of type xs:base64Binary.
	xsd__base64Binary *ApplicationId nullptr 1; ///< Required nillable (xsi:nil when NULL) element.
												/// Element "Pin" of type xs:string.
	std::string *Pin nullptr 1;					///< Required nillable (xsi:nil when NULL) element.
												/// Element "UserId" of type xs:string.
	std::string *UserId nullptr 1;				///< Required nillable (xsi:nil when NULL) element.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://Ama.Authentication.Service/                                       *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
// "_ser__anyType" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
// "_ser__anyURI" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type
/// xs:base64Binary.
// "_ser__base64Binary" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
// "_ser__boolean" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
// "_ser__byte" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
// "_ser__dateTime" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
// "_ser__decimal" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
// "_ser__double" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
// "_ser__float" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
// "_ser__int" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
// "_ser__long" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
// "_ser__QName" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
// "_ser__short" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
// "_ser__string" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type
/// xs:unsignedByte.
// "_ser__unsignedByte" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type
/// xs:unsignedInt.
// "_ser__unsignedInt" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type
/// xs:unsignedLong.
// "_ser__unsignedLong" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type
/// xs:unsignedShort.
// "_ser__unsignedShort" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type
/// "http://schemas.microsoft.com/2003/10/Serialization/":char.
// "_ser__char" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type
/// "http://schemas.microsoft.com/2003/10/Serialization/":duration.
// "_ser__duration" element definition intentionally left blank.
/// @brief Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type
/// "http://schemas.microsoft.com/2003/10/Serialization/":guid.
// "_ser__guid" element definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.

/// @brief Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest
/// of type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus
/// of type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignStatus.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse
/// of type "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":SignResponse.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure of type
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":ArrayOfHashStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure of type
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":HashStructure.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest of type
/// "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature":MultipleSignRequest.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature  *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

// gsoap ns2  service name:	BasicHttpBinding_USCORECCMovelSignature
// gsoap ns2  service type:	CCMovelSignature
// gsoap ns2  service port:	https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc
// gsoap ns2  service namespace:	http://Ama.Authentication.Service/
// gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http

/** @mainpage CCMovelDigitalSignature Definitions

@section CCMovelDigitalSignature_bindings Service Bindings

  - @ref BasicHttpBinding_USCORECCMovelSignature

@section CCMovelDigitalSignature_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page BasicHttpBinding_USCORECCMovelSignature Binding "BasicHttpBinding_USCORECCMovelSignature"

@section BasicHttpBinding_USCORECCMovelSignature_operations Operations of Binding
"BasicHttpBinding_USCORECCMovelSignature"

  - @ref __ns2__CCMovelSign

  - @ref __ns2__GetCertificate

  - @ref __ns2__ValidateOtp

  - @ref __ns2__CCMovelMultipleSign

  - @ref __ns2__ForceSMS

  - @ref __ns2__GetCertificateWithPin

@section BasicHttpBinding_USCORECCMovelSignature_ports Default endpoints of Binding
"BasicHttpBinding_USCORECCMovelSignature"

  - https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

@section BasicHttpBinding_USCORECCMovelSignature_policy Policy of Binding "BasicHttpBinding_USCORECCMovelSignature"

See Section @ref BasicHttpBinding_USCORECCMovelSignature_policy_enablers

  - WS-Policy applicable to the service endpoint ports:
	- Exactly one of the following:
		- All of the following:
			- [7.3] Transport Binding requirements:
				- [7.1] Security Binding Algorithm Suite requirements:
					- Basic256
				- [7.2] WS-Security Header Layout requirements:
					- WS-Security headers 'declare before use' required (gSOAP default)
				- Transport requirements:
					- [5.4.10] HTTPS required:

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCORECCMovelSignature                                  *
 *                                                                            *
\******************************************************************************/

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CCMovelSign                                                       *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__CCMovelSign" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelSignResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CCMovelSign(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__CCMovelSign*                  ns2__CCMovelSign,
	// output parameters:
	_ns2__CCMovelSignResponse          &ns2__CCMovelSignResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CCMovelSign(
	struct soap *soap,
	// input parameters:
	_ns2__CCMovelSign*                  ns2__CCMovelSign,
	// output parameters:
	_ns2__CCMovelSignResponse          &ns2__CCMovelSignResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	CCMovelSign SOAP
// gsoap ns2  service method-style:	CCMovelSign document
// gsoap ns2  service method-encoding:	CCMovelSign literal
// gsoap ns2  service method-input-action:	CCMovelSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelSign
// gsoap ns2  service method-output-action:	CCMovelSign
// http://Ama.Authentication.Service/CCMovelSignature/CCMovelSignResponse
int __ns2__CCMovelSign(_ns2__CCMovelSign *ns2__CCMovelSign,				   ///< Input parameter
					   _ns2__CCMovelSignResponse &ns2__CCMovelSignResponse ///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCertificate                                                    *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__GetCertificate" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/GetCertificate"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificate"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCertificate(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__GetCertificate*               ns2__GetCertificate,
	// output parameters:
	_ns2__GetCertificateResponse       &ns2__GetCertificateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCertificate(
	struct soap *soap,
	// input parameters:
	_ns2__GetCertificate*               ns2__GetCertificate,
	// output parameters:
	_ns2__GetCertificateResponse       &ns2__GetCertificateResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	GetCertificate SOAP
// gsoap ns2  service method-style:	GetCertificate document
// gsoap ns2  service method-encoding:	GetCertificate literal
// gsoap ns2  service method-input-action:	GetCertificate
// http://Ama.Authentication.Service/CCMovelSignature/GetCertificate gsoap ns2  service method-output-action:
// GetCertificate http://Ama.Authentication.Service/CCMovelSignature/GetCertificateResponse
int __ns2__GetCertificate(_ns2__GetCertificate *ns2__GetCertificate,				///< Input parameter
						  _ns2__GetCertificateResponse &ns2__GetCertificateResponse ///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__ValidateOtp                                                       *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__ValidateOtp" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/ValidateOtpResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__ValidateOtp(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__ValidateOtp*                  ns2__ValidateOtp,
	// output parameters:
	_ns2__ValidateOtpResponse          &ns2__ValidateOtpResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__ValidateOtp(
	struct soap *soap,
	// input parameters:
	_ns2__ValidateOtp*                  ns2__ValidateOtp,
	// output parameters:
	_ns2__ValidateOtpResponse          &ns2__ValidateOtpResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	ValidateOtp SOAP
// gsoap ns2  service method-style:	ValidateOtp document
// gsoap ns2  service method-encoding:	ValidateOtp literal
// gsoap ns2  service method-input-action:	ValidateOtp http://Ama.Authentication.Service/CCMovelSignature/ValidateOtp
// gsoap ns2  service method-output-action:	ValidateOtp
// http://Ama.Authentication.Service/CCMovelSignature/ValidateOtpResponse
int __ns2__ValidateOtp(_ns2__ValidateOtp *ns2__ValidateOtp,				   ///< Input parameter
					   _ns2__ValidateOtpResponse &ns2__ValidateOtpResponse ///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CCMovelMultipleSign                                               *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__CCMovelMultipleSign" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSignResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CCMovelMultipleSign(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__CCMovelMultipleSign*          ns2__CCMovelMultipleSign,
	// output parameters:
	_ns2__CCMovelMultipleSignResponse  &ns2__CCMovelMultipleSignResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CCMovelMultipleSign(
	struct soap *soap,
	// input parameters:
	_ns2__CCMovelMultipleSign*          ns2__CCMovelMultipleSign,
	// output parameters:
	_ns2__CCMovelMultipleSignResponse  &ns2__CCMovelMultipleSignResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	CCMovelMultipleSign SOAP
// gsoap ns2  service method-style:	CCMovelMultipleSign document
// gsoap ns2  service method-encoding:	CCMovelMultipleSign literal
// gsoap ns2  service method-input-action:	CCMovelMultipleSign
// http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSign gsoap ns2  service method-output-action:
// CCMovelMultipleSign http://Ama.Authentication.Service/CCMovelSignature/CCMovelMultipleSignResponse
int __ns2__CCMovelMultipleSign(_ns2__CCMovelMultipleSign *ns2__CCMovelMultipleSign,				   ///< Input parameter
							   _ns2__CCMovelMultipleSignResponse &ns2__CCMovelMultipleSignResponse ///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__ForceSMS                                                          *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__ForceSMS" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/ForceSMS"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/ForceSMS"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/ForceSMSResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__ForceSMS(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__ForceSMS*                     ns2__ForceSMS,
	// output parameters:
	_ns2__ForceSMSResponse             &ns2__ForceSMSResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__ForceSMS(
	struct soap *soap,
	// input parameters:
	_ns2__ForceSMS*                     ns2__ForceSMS,
	// output parameters:
	_ns2__ForceSMSResponse             &ns2__ForceSMSResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	ForceSMS SOAP
// gsoap ns2  service method-style:	ForceSMS document
// gsoap ns2  service method-encoding:	ForceSMS literal
// gsoap ns2  service method-input-action:	ForceSMS http://Ama.Authentication.Service/CCMovelSignature/ForceSMS
// gsoap ns2  service method-output-action:	ForceSMS http://Ama.Authentication.Service/CCMovelSignature/ForceSMSResponse
int __ns2__ForceSMS(_ns2__ForceSMS *ns2__ForceSMS,				  ///< Input parameter
					_ns2__ForceSMSResponse &ns2__ForceSMSResponse ///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__GetCertificateWithPin                                             *
 *                                                                            *
\******************************************************************************/

/** Operation "__ns2__GetCertificateWithPin" of service binding "BasicHttpBinding_USCORECCMovelSignature".

  - SOAP document/literal style messaging

  - Default endpoints:
	- https://cmd.autenticacao.gov.pt/Ama.Authentication.Frontend/CCMovelDigitalSignature.svc

  - Default SOAP action or REST location path:
	- "http://Ama.Authentication.Service/CCMovelSignature/GetCertificateWithPin"

  - Addressing input action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificateWithPin"

  - Addressing output action: "http://Ama.Authentication.Service/CCMovelSignature/GetCertificateWithPinResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__GetCertificateWithPin(
	struct soap *soap,
	NULL, // char *endpoint = NULL selects default endpoint for this operation
	NULL, // char *action = NULL selects default action for this operation
	// input parameters:
	_ns2__GetCertificateWithPin*        ns2__GetCertificateWithPin,
	// output parameters:
	_ns2__GetCertificateWithPinResponse&ns2__GetCertificateWithPinResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__GetCertificateWithPin(
	struct soap *soap,
	// input parameters:
	_ns2__GetCertificateWithPin*        ns2__GetCertificateWithPin,
	// output parameters:
	_ns2__GetCertificateWithPinResponse&ns2__GetCertificateWithPinResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCORECCMovelSignatureProxy.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCORECCMovelSignatureService.h generated with soapcpp2):
@code
  class BasicHttpBinding_USCORECCMovelSignatureService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

// gsoap ns2  service method-protocol:	GetCertificateWithPin SOAP
// gsoap ns2  service method-style:	GetCertificateWithPin document
// gsoap ns2  service method-encoding:	GetCertificateWithPin literal
// gsoap ns2  service method-input-action:	GetCertificateWithPin
// http://Ama.Authentication.Service/CCMovelSignature/GetCertificateWithPin gsoap ns2  service method-output-action:
// GetCertificateWithPin http://Ama.Authentication.Service/CCMovelSignature/GetCertificateWithPinResponse
int __ns2__GetCertificateWithPin(
	_ns2__GetCertificateWithPin *ns2__GetCertificateWithPin,				///< Input parameter
	_ns2__GetCertificateWithPinResponse &ns2__GetCertificateWithPinResponse ///< Output parameter
);

/** @page BasicHttpBinding_USCORECCMovelSignature Binding "BasicHttpBinding_USCORECCMovelSignature"

@section BasicHttpBinding_USCORECCMovelSignature_policy_enablers Policy Enablers of Binding
"BasicHttpBinding_USCORECCMovelSignature"

Based on policies and protocol requirements, this service requires importing "wsse.h"

  - WS-Policy reminders and enablers (when applicable):
	- WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
	- WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
	- WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
	- WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
	- WS-Discovery 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
	- WS-Discovery 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsddapi.h" // See the user guide gsoap/doc/wsdd/html/index.html
	@endcode
	- WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
	- WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
	- HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/

#import "wsse.h"

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/

/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section ns2 Top-level root elements of schema "http://Ama.Authentication.Service/"

  - <ns2:CCMovelSign> @ref _ns2__CCMovelSign
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__CCMovelSign(struct soap*, const char *URL, _ns2__CCMovelSign*);
	soap_POST_recv__ns2__CCMovelSign(struct soap*, _ns2__CCMovelSign*);
	@endcode

  - <ns2:CCMovelSignResponse> @ref _ns2__CCMovelSignResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__CCMovelSignResponse(struct soap*, const char *URL, _ns2__CCMovelSignResponse*);
	soap_POST_recv__ns2__CCMovelSignResponse(struct soap*, _ns2__CCMovelSignResponse*);
	@endcode

  - <ns2:GetCertificate> @ref _ns2__GetCertificate
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__GetCertificate(struct soap*, const char *URL, _ns2__GetCertificate*);
	soap_POST_recv__ns2__GetCertificate(struct soap*, _ns2__GetCertificate*);
	@endcode

  - <ns2:GetCertificateResponse> @ref _ns2__GetCertificateResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__GetCertificateResponse(struct soap*, const char *URL, _ns2__GetCertificateResponse*);
	soap_POST_recv__ns2__GetCertificateResponse(struct soap*, _ns2__GetCertificateResponse*);
	@endcode

  - <ns2:ValidateOtp> @ref _ns2__ValidateOtp
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__ValidateOtp(struct soap*, const char *URL, _ns2__ValidateOtp*);
	soap_POST_recv__ns2__ValidateOtp(struct soap*, _ns2__ValidateOtp*);
	@endcode

  - <ns2:ValidateOtpResponse> @ref _ns2__ValidateOtpResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__ValidateOtpResponse(struct soap*, const char *URL, _ns2__ValidateOtpResponse*);
	soap_POST_recv__ns2__ValidateOtpResponse(struct soap*, _ns2__ValidateOtpResponse*);
	@endcode

  - <ns2:CCMovelMultipleSign> @ref _ns2__CCMovelMultipleSign
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__CCMovelMultipleSign(struct soap*, const char *URL, _ns2__CCMovelMultipleSign*);
	soap_POST_recv__ns2__CCMovelMultipleSign(struct soap*, _ns2__CCMovelMultipleSign*);
	@endcode

  - <ns2:CCMovelMultipleSignResponse> @ref _ns2__CCMovelMultipleSignResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__CCMovelMultipleSignResponse(struct soap*, const char *URL, _ns2__CCMovelMultipleSignResponse*);
	soap_POST_recv__ns2__CCMovelMultipleSignResponse(struct soap*, _ns2__CCMovelMultipleSignResponse*);
	@endcode

  - <ns2:ForceSMS> @ref _ns2__ForceSMS
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__ForceSMS(struct soap*, _ns2__ForceSMS*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__ForceSMS(struct soap*, _ns2__ForceSMS*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__ForceSMS(struct soap*, const char *URL, _ns2__ForceSMS*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__ForceSMS(struct soap*, const char *URL, _ns2__ForceSMS*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__ForceSMS(struct soap*, const char *URL, _ns2__ForceSMS*);
	soap_POST_recv__ns2__ForceSMS(struct soap*, _ns2__ForceSMS*);
	@endcode

  - <ns2:ForceSMSResponse> @ref _ns2__ForceSMSResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__ForceSMSResponse(struct soap*, _ns2__ForceSMSResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__ForceSMSResponse(struct soap*, _ns2__ForceSMSResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__ForceSMSResponse(struct soap*, const char *URL, _ns2__ForceSMSResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__ForceSMSResponse(struct soap*, const char *URL, _ns2__ForceSMSResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__ForceSMSResponse(struct soap*, const char *URL, _ns2__ForceSMSResponse*);
	soap_POST_recv__ns2__ForceSMSResponse(struct soap*, _ns2__ForceSMSResponse*);
	@endcode

  - <ns2:GetCertificateWithPin> @ref _ns2__GetCertificateWithPin
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__GetCertificateWithPin(struct soap*, _ns2__GetCertificateWithPin*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__GetCertificateWithPin(struct soap*, _ns2__GetCertificateWithPin*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__GetCertificateWithPin(struct soap*, const char *URL, _ns2__GetCertificateWithPin*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__GetCertificateWithPin(struct soap*, const char *URL, _ns2__GetCertificateWithPin*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__GetCertificateWithPin(struct soap*, const char *URL, _ns2__GetCertificateWithPin*);
	soap_POST_recv__ns2__GetCertificateWithPin(struct soap*, _ns2__GetCertificateWithPin*);
	@endcode

  - <ns2:GetCertificateWithPinResponse> @ref _ns2__GetCertificateWithPinResponse
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ns2__GetCertificateWithPinResponse(struct soap*, _ns2__GetCertificateWithPinResponse*);
	// Writer (returns SOAP_OK on success):
	soap_write__ns2__GetCertificateWithPinResponse(struct soap*, _ns2__GetCertificateWithPinResponse*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ns2__GetCertificateWithPinResponse(struct soap*, const char *URL, _ns2__GetCertificateWithPinResponse*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ns2__GetCertificateWithPinResponse(struct soap*, const char *URL, _ns2__GetCertificateWithPinResponse*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ns2__GetCertificateWithPinResponse(struct soap*, const char *URL,
_ns2__GetCertificateWithPinResponse*); soap_POST_recv__ns2__GetCertificateWithPinResponse(struct soap*,
_ns2__GetCertificateWithPinResponse*);
	@endcode

*/

/**

@section ser Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ser:anyType> @ref _ser__anyType
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__anyType(struct soap*, struct __ser__anyType);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__anyType(struct soap*, struct __ser__anyType);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__anyType(struct soap*, const char *URL, struct __ser__anyType);
	soap_POST_recv__ser__anyType(struct soap*, struct __ser__anyType);
	@endcode

  - <ser:anyURI> @ref _ser__anyURI
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__anyURI(struct soap*, xsd__anyURI*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__anyURI(struct soap*, xsd__anyURI*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__anyURI(struct soap*, const char *URL, xsd__anyURI*);
	soap_POST_recv__ser__anyURI(struct soap*, xsd__anyURI*);
	@endcode

  - <ser:base64Binary> @ref _ser__base64Binary
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__base64Binary(struct soap*, xsd__base64Binary*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__base64Binary(struct soap*, xsd__base64Binary*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__base64Binary(struct soap*, const char *URL, xsd__base64Binary*);
	soap_POST_recv__ser__base64Binary(struct soap*, xsd__base64Binary*);
	@endcode

  - <ser:boolean> @ref _ser__boolean
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__boolean(struct soap*, bool*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__boolean(struct soap*, bool*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__boolean(struct soap*, const char *URL, bool*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__boolean(struct soap*, const char *URL, bool*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__boolean(struct soap*, const char *URL, bool*);
	soap_POST_recv__ser__boolean(struct soap*, bool*);
	@endcode

  - <ser:byte> @ref _ser__byte
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__byte(struct soap*, xsd__byte*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__byte(struct soap*, xsd__byte*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__byte(struct soap*, const char *URL, xsd__byte*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__byte(struct soap*, const char *URL, xsd__byte*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__byte(struct soap*, const char *URL, xsd__byte*);
	soap_POST_recv__ser__byte(struct soap*, xsd__byte*);
	@endcode

  - <ser:dateTime> @ref _ser__dateTime
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__dateTime(struct soap*, time_t*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__dateTime(struct soap*, time_t*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__dateTime(struct soap*, const char *URL, time_t*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__dateTime(struct soap*, const char *URL, time_t*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__dateTime(struct soap*, const char *URL, time_t*);
	soap_POST_recv__ser__dateTime(struct soap*, time_t*);
	@endcode

  - <ser:decimal> @ref _ser__decimal
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__decimal(struct soap*, xsd__decimal*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__decimal(struct soap*, xsd__decimal*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__decimal(struct soap*, const char *URL, xsd__decimal*);
	soap_POST_recv__ser__decimal(struct soap*, xsd__decimal*);
	@endcode

  - <ser:double> @ref _ser__double
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__double(struct soap*, double*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__double(struct soap*, double*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__double(struct soap*, const char *URL, double*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__double(struct soap*, const char *URL, double*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__double(struct soap*, const char *URL, double*);
	soap_POST_recv__ser__double(struct soap*, double*);
	@endcode

  - <ser:float> @ref _ser__float
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__float(struct soap*, float*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__float(struct soap*, float*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__float(struct soap*, const char *URL, float*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__float(struct soap*, const char *URL, float*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__float(struct soap*, const char *URL, float*);
	soap_POST_recv__ser__float(struct soap*, float*);
	@endcode

  - <ser:int> @ref _ser__int
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__int(struct soap*, int*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__int(struct soap*, int*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__int(struct soap*, const char *URL, int*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__int(struct soap*, const char *URL, int*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__int(struct soap*, const char *URL, int*);
	soap_POST_recv__ser__int(struct soap*, int*);
	@endcode

  - <ser:long> @ref _ser__long
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__long(struct soap*, LONG64*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__long(struct soap*, LONG64*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__long(struct soap*, const char *URL, LONG64*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__long(struct soap*, const char *URL, LONG64*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__long(struct soap*, const char *URL, LONG64*);
	soap_POST_recv__ser__long(struct soap*, LONG64*);
	@endcode

  - <ser:QName> @ref _ser__QName
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__QName(struct soap*, xsd__QName*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__QName(struct soap*, xsd__QName*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__QName(struct soap*, const char *URL, xsd__QName*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__QName(struct soap*, const char *URL, xsd__QName*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__QName(struct soap*, const char *URL, xsd__QName*);
	soap_POST_recv__ser__QName(struct soap*, xsd__QName*);
	@endcode

  - <ser:short> @ref _ser__short
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__short(struct soap*, short*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__short(struct soap*, short*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__short(struct soap*, const char *URL, short*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__short(struct soap*, const char *URL, short*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__short(struct soap*, const char *URL, short*);
	soap_POST_recv__ser__short(struct soap*, short*);
	@endcode

  - <ser:string> @ref _ser__string
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__string(struct soap*, std::string*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__string(struct soap*, std::string*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__string(struct soap*, const char *URL, std::string*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__string(struct soap*, const char *URL, std::string*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__string(struct soap*, const char *URL, std::string*);
	soap_POST_recv__ser__string(struct soap*, std::string*);
	@endcode

  - <ser:unsignedByte> @ref _ser__unsignedByte
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__unsignedByte(struct soap*, const char *URL, xsd__unsignedByte*);
	soap_POST_recv__ser__unsignedByte(struct soap*, xsd__unsignedByte*);
	@endcode

  - <ser:unsignedInt> @ref _ser__unsignedInt
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__unsignedInt(struct soap*, unsigned int*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__unsignedInt(struct soap*, unsigned int*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__unsignedInt(struct soap*, const char *URL, unsigned int*);
	soap_POST_recv__ser__unsignedInt(struct soap*, unsigned int*);
	@endcode

  - <ser:unsignedLong> @ref _ser__unsignedLong
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__unsignedLong(struct soap*, ULONG64*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__unsignedLong(struct soap*, ULONG64*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__unsignedLong(struct soap*, const char *URL, ULONG64*);
	soap_POST_recv__ser__unsignedLong(struct soap*, ULONG64*);
	@endcode

  - <ser:unsignedShort> @ref _ser__unsignedShort
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__unsignedShort(struct soap*, unsigned short*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__unsignedShort(struct soap*, unsigned short*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__unsignedShort(struct soap*, const char *URL, unsigned short*);
	soap_POST_recv__ser__unsignedShort(struct soap*, unsigned short*);
	@endcode

  - <ser:char> @ref _ser__char
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__char(struct soap*, int*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__char(struct soap*, int*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__char(struct soap*, const char *URL, int*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__char(struct soap*, const char *URL, int*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__char(struct soap*, const char *URL, int*);
	soap_POST_recv__ser__char(struct soap*, int*);
	@endcode

  - <ser:duration> @ref _ser__duration
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__duration(struct soap*, xsd__duration*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__duration(struct soap*, xsd__duration*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__duration(struct soap*, const char *URL, xsd__duration*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__duration(struct soap*, const char *URL, xsd__duration*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__duration(struct soap*, const char *URL, xsd__duration*);
	soap_POST_recv__ser__duration(struct soap*, xsd__duration*);
	@endcode

  - <ser:guid> @ref _ser__guid
	@code
	// Reader (returns SOAP_OK on success):
	soap_read__ser__guid(struct soap*, char*);
	// Writer (returns SOAP_OK on success):
	soap_write__ser__guid(struct soap*, char*);
	// REST GET (returns SOAP_OK on success):
	soap_GET__ser__guid(struct soap*, const char *URL, char*);
	// REST PUT (returns SOAP_OK on success):
	soap_PUT__ser__guid(struct soap*, const char *URL, char*);
	// REST POST (returns SOAP_OK on success):
	soap_POST_send__ser__guid(struct soap*, const char *URL, char*);
	soap_POST_recv__ser__guid(struct soap*, char*);
	@endcode

*/

/**

@section ns3 Top-level root elements of schema "http://schemas.datacontract.org/2004/07/Ama.Structures.CCMovelSignature"

  - <ns3:SignRequest> (use wsdl2h option -g to auto-generate type _ns3__SignRequest)

  - <ns3:SignStatus> (use wsdl2h option -g to auto-generate type _ns3__SignStatus)

  - <ns3:SignResponse> (use wsdl2h option -g to auto-generate type _ns3__SignResponse)

  - <ns3:ArrayOfHashStructure> (use wsdl2h option -g to auto-generate type _ns3__ArrayOfHashStructure)

  - <ns3:HashStructure> (use wsdl2h option -g to auto-generate type _ns3__HashStructure)

  - <ns3:MultipleSignRequest> (use wsdl2h option -g to auto-generate type _ns3__MultipleSignRequest)

*/

/* End of CCMovelDigitalSignature.h */
